import os
import re
import requests
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

load_dotenv()
SERPER_API_KEY = os.getenv("SERPER_API_KEY")

def parse_price(price_str):
    """
    Extracts and converts a price-like string (e.g., "$96.34", "1.089,99 ‚Ç¨") into a float.
    Prioritizes actual monetary patterns with currency symbols.
    """
    if not price_str:
        return None

    price_str = price_str.replace("\n", ".")  # Normalize multiline prices

    # Prefer currency-prefixed values like $123.45, ‚Ç¨999,99, etc.
    currency_match = re.search(r'[\$‚Ç¨‚Çπ¬£]\s?[\d\.,]+', price_str)
    if currency_match:
        raw = currency_match.group(0)
    else:
        # Fallback: get first number-like substring (can be risky!)
        match = re.search(r'[\d\.,]+', price_str)
        if not match:
            return None
        raw = match.group(0)

    cleaned = re.sub(r"[^\d.,]", "", raw)  # Remove currency symbol and non-numeric chars

    # US format: 1,234.56
    if re.match(r"^\d{1,3}(,\d{3})*(\.\d+)?$", cleaned):
        cleaned = cleaned.replace(",", "")
    # EU format: 1.234,56
    elif re.match(r"^\d{1,3}(\.\d{3})*(,\d+)?$", cleaned):
        cleaned = cleaned.replace(".", "").replace(",", ".")
    # Simple comma decimal: 1234,56
    elif "," in cleaned and "." not in cleaned:
        cleaned = cleaned.replace(",", ".")

    try:
        final_price = round(float(cleaned), 2)
        print(f"üßÆ Parsed final price: {final_price} from raw: '{price_str}'")
        return final_price
    except ValueError:
        return None

def find_product_url(query):
    """
    Queries Serper.dev API to get a product URL and scrapes price using Selenium.
    Attempts multiple URLs until a valid price is found.
    """
    if not SERPER_API_KEY:
        raise ValueError("Missing SERPER_API_KEY in environment variables.")

    headers = {
        "X-API-KEY": SERPER_API_KEY,
        "Content-Type": "application/json"
    }

    try:
        response = requests.post("https://google.serper.dev/search", json={"q": query}, headers=headers)
        response.raise_for_status()
        data = response.json()

        candidates = []
        if data.get("shopping"):
            candidates.extend([item.get("link") for item in data["shopping"][:5] if item.get("link")])
        if data.get("organic"):
            candidates.extend([item.get("link") for item in data["organic"][:5] if item.get("link")])

        for url in candidates:
            price_str = scrape_price_with_selenium(url)
            print(f"üîç Raw scraped price string: {price_str}")
            price = parse_price(price_str) if price_str else None
            if price:
                return {
                    "url": url,
                    "price": price
                }

        return {"url": None, "price": None}

    except Exception as e:
        print("‚ùå Error during Serper API search:", e)
        return {"url": None, "price": None}

def scrape_price_with_selenium(url):
    """
    Uses Selenium to load a product page, detect stock availability, and extract price.
    """
    try:
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")

        driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=chrome_options)
        driver.get(url)

        wait = WebDriverWait(driver, 10)

        # Check for out-of-stock indicators
        body_text = driver.find_element(By.TAG_NAME, "body").text.lower()
        out_of_stock_phrases = [
            "out of stock", "currently unavailable", "temporarily unavailable",
            "sold out", "this item cannot be shipped"
        ]
        if any(phrase in body_text for phrase in out_of_stock_phrases):
            print("‚ùå Product appears to be out of stock.")
            driver.quit()
            return None

        # Try known selectors for price
        potential_selectors = [
            '.a-price .a-offscreen',
            '.priceblock_ourprice',
            '.price .amount',
            '[class*="price"]',
            '[id*="price"]',
            '[class*="Price"]',
            '[id*="Price"]',
            '[class*="our-price"]',
            '[class*="offer-price"]',
            '[class*="a-price"]',
            '[class*="a-offscreen"]'
        ]

        for selector in potential_selectors:
            try:
                elements = wait.until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, selector)))
                for elem in elements:
                    text = elem.text.strip().replace("\n", ".")
                    print(f"üí¨ Candidate text from {selector}: '{text}'")
                    if any(symbol in text for symbol in ["‚Çπ", "$", "¬£", "‚Ç¨"]) and any(char.isdigit() for char in text):
                        driver.quit()
                        return text
            except Exception:
                continue

        driver.quit()
    except Exception as e:
        print(f"‚ö†Ô∏è Selenium scrape failed for {url}: {e}")
    return None
